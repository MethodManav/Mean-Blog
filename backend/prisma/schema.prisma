// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  name     String
  password String
  role     String    @default("student")
  blogs    Blogs[]
  Note     Note[]
  Comment  Comment[]
  Rating   Rating[]
}

model Blogs {
  id        Int      @id @default(autoincrement())
  authorId  Int
  title     String
  content   String
  images    String[]
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
}

model Subject {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Note        Note[]
  Chapters    Chapters[]
}

model Chapters {
  id        Int      @id @default(autoincrement())
  name      String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  createdAt DateTime @default(now())
  Note      Note[]
}

model Note {
  id        Int       @id @default(autoincrement())
  title     String
  subject   Subject   @relation(fields: [subjectId], references: [id])
  subjectId Int
  chapter   Chapters  @relation(fields: [chapterId], references: [id])
  chapterId Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  content   String[]
  comments  Comment[]
  ratings   Rating[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  note      Note     @relation(fields: [noteId], references: [id])
  noteId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(1) @map("rating") // Ensure a valid range via app logic
  note      Note     @relation(fields: [noteId], references: [id])
  noteId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}
